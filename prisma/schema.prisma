generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model Cocina {
  id                   Int                  @id @default(autoincrement())
  nombre               String               @db.VarChar(100)
  direccion            String
  telefono             String               @db.VarChar(15)
  clientes             Cliente[]
  complementos         Complemento[]
  pagosPendientes      PagosPendientes[]
  pedidos              Pedido[]
  platillos            Platillo[]
  platillosProgramados PlatilloProgramado[]
  usuarios             Usuario[]
}

model Usuario {
  id            Int            @id @default(autoincrement())
  cocinaId      Int?
  email         String         @unique @db.VarChar(150)
  contrasena    String         @db.VarChar(255)
  rol           Rol            @default(ADMIN)
  emailValid    Boolean        @default(false)
  nombre        String         @default("Nombre por defecto") @db.VarChar(100)
  refreshTokens RefreshToken[]
  cocina        Cocina?        @relation(fields: [cocinaId], references: [id])
}

model Platillo {
  id                   Int                   @id @default(autoincrement())
  nombre               String                @db.VarChar(100)
  precioMedia          Float                 @db.Real
  precioEntera         Float                 @db.Real
  rutaImagen           String?
  cocinaId             Int
  detalles             DetallePedido[]
  cocina               Cocina                @relation(fields: [cocinaId], references: [id])
  complementos         PlatilloComplemento[]
  platillosProgramados PlatilloProgramado[]
}

model Complemento {
  id          Int                   @id @default(autoincrement())
  nombre      String                @db.VarChar(100)
  descripcion String?
  rutaImagen  String?
  cocinaId    Int
  cocina      Cocina                @relation(fields: [cocinaId], references: [id])
  platillos   PlatilloComplemento[]

  @@unique([nombre, cocinaId])
}

model PlatilloComplemento {
  platilloId    Int
  complementoId Int
  complemento   Complemento @relation(fields: [complementoId], references: [id])
  platillo      Platillo    @relation(fields: [platilloId], references: [id])

  @@id([platilloId, complementoId])
}

model Cliente {
  id        Int      @id @default(autoincrement())
  nombre    String   @db.VarChar(100)
  telefono  String?  @db.VarChar(15)
  direccion String?
  cocinaId  Int
  cocina    Cocina   @relation(fields: [cocinaId], references: [id])
  pedidos   Pedido[]
}

model Pedido {
  id              Int              @id @default(autoincrement())
  fecha           DateTime         @db.Timestamptz(6)
  estado          EstadoPedido     @default(PENDIENTE)
  tipoEntrega     TipoEntrega      @default(PRESENCIAL)
  tipoPago        TipoPago         @default(EFECTIVO)
  clienteId       Int?
  cocinaId        Int
  esPagado        Boolean          @default(false)
  notas            String?
  detalles        DetallePedido[]
  pagosPendientes PagosPendientes?
  cliente         Cliente?         @relation(fields: [clienteId], references: [id])
  cocina          Cocina           @relation(fields: [cocinaId], references: [id])
}

model PagosPendientes {
  id             Int        @id @default(autoincrement())
  cantidad       Float      @db.Real
  montoPendiente Float      @db.Real
  estadoPago     EstadoPago @default(PENDIENTE)
  pedidoId       Int        @unique
  cocinaId       Int
  cocina         Cocina     @relation(fields: [cocinaId], references: [id])
  pedido         Pedido     @relation(fields: [pedidoId], references: [id])
}

model DetallePedido {
  id             Int      @id @default(autoincrement())
  cantidadEntera Int
  cantidadMedia  Int
  pedidoId       Int
  platilloId     Int
  pedido         Pedido   @relation(fields: [pedidoId], references: [id])
  platillo       Platillo @relation(fields: [platilloId], references: [id])
}

model RefreshToken {
  userId     Int
  token      String    @unique
  createdAt  DateTime  @default(now()) @db.Timestamptz(6)
  id         Int       @id @default(autoincrement())
  deviceName String?
  deviceOS   String?
  ipAddress  String?
  lastUsedAt DateTime? @default(now()) @db.Timestamptz(6)
  usuario    Usuario   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
}

model PlatilloProgramado {
  id              Int       @id @default(autoincrement())
  platilloId      Int
  cocinaId        Int
  diaSemana       DiaSemana
  controlRaciones Boolean   @default(false)
  limiteRaciones  Int?
  cocina          Cocina    @relation(fields: [cocinaId], references: [id])
  platillo        Platillo  @relation(fields: [platilloId], references: [id])

  @@unique([platilloId, cocinaId, diaSemana])
}

enum EstadoPago {
  PENDIENTE
  PAGADO
}

enum Rol {
  ADMIN
  DELIVERY
  OPERATOR
  SUPER_ADMIN
}

enum EstadoPedido {
  PENDIENTE
  EMPAQUETADO
  COMPLETADO
  ENTREGADO
  CANCELADO
}

enum TipoEntrega {
  ENVIO
  PRESENCIAL
}

enum TipoPago {
  EFECTIVO
  TARJETA
  FIADO
}

enum DiaSemana {
  LUNES
  MARTES
  MIERCOLES
  JUEVES
  VIERNES
  SABADO
  DOMINGO
}
