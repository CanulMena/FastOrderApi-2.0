generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model Cocina {
  id              Int               @id @default(autoincrement())
  nombre          String            @db.VarChar(100)
  direccion       String
  telefono        String            @db.VarChar(15)
  clientes        Cliente[]
  complementos    Complemento[]
  pagosPendientes PagosPendientes[]
  pedidos         Pedido[]
  platillos       Platillo[]
  usuarios        Usuario[]
  platillosProgramados PlatilloProgramado[]
}

model Usuario {
  id         Int     @id @default(autoincrement())
  cocinaId   Int?
  nombre     String  @db.VarChar(100) @default("Nombre por defecto")
  email      String  @unique @db.VarChar(150)
  emailValid Boolean @default(false)
  contrasena String  @db.VarChar(255)
  rol        Rol     @default(ADMIN)
  cocina     Cocina? @relation(fields: [cocinaId], references: [id])
  refreshTokens RefreshToken[]
}

model Platillo {
  id           Int                   @id @default(autoincrement())
  nombre       String                @db.VarChar(100)
  precioMedia  Float                 @db.Real
  precioEntera Float                 @db.Real
  rutaImagen   String?
  cocinaId     Int
  detalles     DetallePedido[]
  cocina       Cocina                @relation(fields: [cocinaId], references: [id])
  complementos PlatilloComplemento[]
  platillosProgramados PlatilloProgramado[]
}

model Complemento {
  id          Int                   @id @default(autoincrement())
  nombre      String                @db.VarChar(100)
  descripcion String?
  rutaImagen  String?
  cocinaId    Int
  cocina      Cocina                @relation(fields: [cocinaId], references: [id])
  platillos   PlatilloComplemento[]

  @@unique([nombre, cocinaId])
}

model PlatilloComplemento {
  platilloId    Int
  complementoId Int
  complemento   Complemento @relation(fields: [complementoId], references: [id])
  platillo      Platillo    @relation(fields: [platilloId], references: [id])

  @@id([platilloId, complementoId])
}

model Cliente {
  id        Int      @id @default(autoincrement())
  nombre    String   @db.VarChar(100)
  telefono  String?  @db.VarChar(15)
  direccion String?
  cocinaId  Int
  cocina    Cocina   @relation(fields: [cocinaId], references: [id])
  pedidos   Pedido[]
}

model Pedido {
  id              Int              @id @default(autoincrement())
  fecha           DateTime         @db.Timestamptz(6)
  estado          EstadoPedido     @default(PENDIENTE)
  tipoEntrega     TipoEntrega      @default(PRESENCIAL)
  tipoPago        TipoPago         @default(EFECTIVO)
  esPagado        Boolean          @default(false)
  clienteId       Int
  cocinaId        Int
  detalles        DetallePedido[]
  pagosPendientes PagosPendientes?
  cliente         Cliente          @relation(fields: [clienteId], references: [id])
  cocina          Cocina           @relation(fields: [cocinaId], references: [id])
}

model PagosPendientes {
  id             Int        @id @default(autoincrement())
  cantidad       Float      @db.Real
  montoPendiente Float      @db.Real
  estadoPago     EstadoPago @default(PENDIENTE)
  pedidoId       Int        @unique
  cocinaId       Int
  cocina         Cocina     @relation(fields: [cocinaId], references: [id])
  pedido         Pedido     @relation(fields: [pedidoId], references: [id])
}

model DetallePedido {
  id             Int      @id @default(autoincrement())
  cantidadEntera Int
  cantidadMedia  Int
  pedidoId       Int
  platilloId     Int
  pedido         Pedido   @relation(fields: [pedidoId], references: [id])
  platillo       Platillo @relation(fields: [platilloId], references: [id])
}

model RefreshToken {
  id          Int       @id @default(autoincrement())       // Identificador único del registro
  userId      Int                                           // Relaciona el token con un usuario
  token       String    @unique                             // El refresh token en texto plano (puedes migrar a hash más adelante)
  createdAt   DateTime  @default(now()) @db.Timestamptz(6)  // Fecha de creación (UTC)
  lastUsedAt  DateTime? @default(now()) @db.Timestamptz(6)  // Última vez que se usó para renovar tokens
  deviceName  String?                                       // Ej. "Chrome en Windows 10"
  deviceOS    String?                                       // Ej. "Windows 10", "Android 13"
  ipAddress   String?                                       // IP desde donde se generó (opcional, útil para auditoría)

  usuario     Usuario   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
}

model PlatilloProgramado {
  id                  Int       @id @default(autoincrement())
  platilloId          Int
  cocinaId            Int
  diaSemana           DiaSemana
  limiteRaciones      Int?     // Opcional: si es null => sin control
  controlRaciones     Boolean  @default(false) // <-- ¡clave para activarlo!
  platillo            Platillo  @relation(fields: [platilloId], references: [id])
  cocina              Cocina    @relation(fields: [cocinaId], references: [id])

  @@unique([platilloId, cocinaId, diaSemana]) //en un platillo no se puede programar la misma fecha en la misma cocina
}

enum EstadoPago {
  PENDIENTE
  PAGADO
}

enum Rol {
  ADMIN
  DELIVERY
  OPERATOR
  SUPER_ADMIN
}

enum EstadoPedido {
  PENDIENTE
  ENTREGADO
  CANCELADO
}

enum TipoEntrega {
  ENVIO
  PRESENCIAL
}

enum TipoPago {
  EFECTIVO
  TARJETA
  FIADO
}

enum DiaSemana {
  LUNES
  MARTES
  MIERCOLES
  JUEVES
  VIERNES
  SABADO
  DOMINGO
}